import React, { useEffect, useState, useRef } from "react";
import axios from "axios";
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap-icons/font/bootstrap-icons.css';
import { Card, Container, Row, Col, Spinner, Alert, Badge, Button, Form, ProgressBar, Dropdown, Tab, Tabs, InputGroup } from 'react-bootstrap';
import { Bar, Pie, Line, Doughnut } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
} from 'chart.js';

// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  ArcElement
);

// Function to export table data as CSV
const exportTableToCSV = (tableId, filename = 'data') => {
  const table = document.getElementById(tableId);
  if (!table) return;
  
  const rows = table.querySelectorAll('tr');
  let csv = [];
  
  for (let i = 0; i < rows.length; i++) {
    const row = [], cols = rows[i].querySelectorAll('td, th');
    
    for (let j = 0; j < cols.length; j++) {
      let data = cols[j].innerText.replace(/,/g, ' ');
      data = data.replace(/"/g, '""');
      row.push('"' + data + '"');
    }
    csv.push(row.join(','));
  }
  
  const csvString = csv.join('\n');
  const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', filename + '.csv');
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

function Table() {
  const [users, setUsers] = useState([]);
  const [products, setProducts] = useState([]);
  const [reviews, setReviews] = useState([]);
  const [wishlists, setWishlists] = useState([]);
  const [loading, setLoading] = useState(true);
  const [fetchError, setFetchError] = useState(null);
  const [dateRange, setDateRange] = useState({ start: '', end: '' });
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [activeTab, setActiveTab] = useState('dashboard');
  const [searchTerm, setSearchTerm] = useState('');
  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });
  const chartRefs = useRef({});

  const downloadChartAsImage = (chartId, filename) => {
    const chartRef = chartRefs.current[chartId];
    if (chartRef) {
      const link = document.createElement('a');
      link.download = `${filename}.png`;
      link.href = chartRef.toBase64Image();
      link.click();
    }
  };

  useEffect(() => {
    setLoading(true);
    setFetchError(null);
    setLoadingProgress(10);

    const progressInterval = setInterval(() => {
      setLoadingProgress(prev => {
        const newProgress = prev + Math.random() * 10;
        return newProgress < 90 ? newProgress : prev;
      });
    }, 300);

    Promise.all([
      axios.get("http://localhost:5001/api/users"),
      axios.get("http://localhost:5001/api/products"),
      axios.get("http://localhost:5001/api/reviews"),
      axios.get("http://localhost:5001/api/wishlists"),
    ])
      .then(([usersRes, productsRes, reviewsRes, wishlistsRes]) => {
        setLoadingProgress(95);
        setUsers(usersRes.data.users || []);
        setProducts(productsRes.data.products || []);
        setReviews(reviewsRes.data.reviews || []);
        setWishlists(wishlistsRes.data.wishlists || []);
        setLoadingProgress(100);
        setTimeout(() => {
          setLoading(false);
        }, 500);
        clearInterval(progressInterval);
      })
      .catch((err) => {
        setFetchError("Failed to fetch data. Please check your server and network.");
        setLoading(false);
        clearInterval(progressInterval);
      });

    return () => clearInterval(progressInterval);
  }, []);

  const prepareProductCategoryData = () => {
    const categories = {};
    products.forEach(product => {
      const category = product.category || 'Uncategorized';
      categories[category] = (categories[category] || 0) + 1;
    });
    
    return {
      labels: Object.keys(categories),
      datasets: [
        {
          label: 'Products by Category',
          data: Object.values(categories),
          backgroundColor: [
            'rgba(255, 99, 132, 0.6)',
            'rgba(54, 162, 235, 0.6)',
            'rgba(255, 206, 86, 0.6)',
            'rgba(75, 192, 192, 0.6)',
            'rgba(153, 102, 255, 0.6)',
          ],
          borderWidth: 1,
        },
      ],
    };
  };

  const prepareReviewsRatingData = () => {
    const ratings = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0};
    reviews.forEach(review => {
      if (review.rating >= 1 && review.rating <= 5) {
        ratings[review.rating] = ratings[review.rating] + 1;
      }
    });
    
    return {
      labels: ['1 Star', '2 Stars', '3 Stars', '4 Stars', '5 Stars'],
      datasets: [
        {
          label: 'Review Ratings',
          data: Object.values(ratings),
          backgroundColor: 'rgba(75, 192, 192, 0.6)',
          borderColor: 'rgba(75, 192, 192, 1)',
          borderWidth: 1,
        },
      ],
    };
  };

  const prepareWishlistItemsData = () => {
    const sortedWishlists = [...wishlists].sort((a, b) => 
      (b.wishlist?.length || 0) - (a.wishlist?.length || 0)
    ).slice(0, 5);
    
    return {
      labels: sortedWishlists.map(w => w.user.name),
      datasets: [
        {
          label: 'Wishlist Items Count',
          data: sortedWishlists.map(w => w.wishlist?.length || 0),
          backgroundColor: 'rgba(153, 102, 255, 0.6)',
          borderColor: 'rgba(153, 102, 255, 1)',
          borderWidth: 1,
        },
      ],
    };
  };

  const priceRangeData = () => {
    const ranges = {
      '0-500': 0,
      '501-1000': 0,
      '1001-2000': 0,
      '2001-5000': 0,
      '5001+': 0
    };
    
    products.forEach(product => {
      const price = product.price;
      if (price <= 500) ranges['0-500']++;
      else if (price <= 1000) ranges['501-1000']++;
      else if (price <= 2000) ranges['1001-2000']++;
      else if (price <= 5000) ranges['2001-5000']++;
      else ranges['5001+']++;
    });
    
    return {
      labels: Object.keys(ranges),
      datasets: [
        {
          label: 'Product Price Distribution',
          data: Object.values(ranges),
          backgroundColor: [
            'rgba(255, 99, 132, 0.6)',
            'rgba(54, 162, 235, 0.6)',
            'rgba(255, 206, 86, 0.6)',
            'rgba(75, 192, 192, 0.6)',
            'rgba(153, 102, 255, 0.6)',
          ],
          borderWidth: 1,
        },
      ],
    };
  };

  const calculateKeyMetrics = () => {
    return {
      totalUsers: users.length,
      totalProducts: products.length,
      totalReviews: reviews.length,
      totalWishlists: wishlists.length,
      averageRating: reviews.length 
        ? (reviews.reduce((acc, review) => acc + (review.rating || 0), 0) / reviews.length).toFixed(1) 
        : 0,
      topCategory: getTopCategory(),
      totalProductValue: products.reduce((acc, product) => acc + (product.price || 0), 0),
      mostWishlistedProduct: getMostWishlistedProduct()
    };
  };

  const getTopCategory = () => {
    const categories = {};
    products.forEach(product => {
      const category = product.category || 'Uncategorized';
      categories[category] = (categories[category] || 0) + 1;
    });
    
    let topCategory = { name: 'None', count: 0 };
    Object.entries(categories).forEach(([name, count]) => {
      if (count > topCategory.count) {
        topCategory = { name, count };
      }
    });
    
    return topCategory;
  };

  const getMostWishlistedProduct = () => {
    const productCounts = {};
    
    wishlists.forEach(wishlist => {
      if (wishlist.wishlist && wishlist.wishlist.length > 0) {
        wishlist.wishlist.forEach(item => {
          productCounts[item._id] = (productCounts[item._id] || 0) + 1;
          productCounts[`name_${item._id}`] = item.name;
        });
      }
    });
    
    let topProduct = { id: null, name: 'None', count: 0 };
    Object.entries(productCounts).forEach(([key, value]) => {
      if (!key.startsWith('name_') && value > topProduct.count) {
        topProduct = { 
          id: key, 
          name: productCounts[`name_${key}`] || 'Unknown',
          count: value 
        };
      }
    });
    
    return topProduct;
  };

  const prepareProductTrendData = () => {
    return {
      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
      datasets: [
        {
          label: 'Product Additions',
          data: [12, 19, 8, 15, 20, products.length],
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          borderColor: 'rgba(75, 192, 192, 1)',
          borderWidth: 2,
          tension: 0.4,
        },
      ],
    };
  };

  const prepareUserEngagementData = () => {
    return {
      labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],
      datasets: [
        {
          label: 'User Registrations',
          data: [Math.floor(users.length * 0.2), Math.floor(users.length * 0.3), 
                 Math.floor(users.length * 0.4), users.length - Math.floor(users.length * 0.9)],
          backgroundColor: 'rgba(54, 162, 235, 0.6)',
          borderColor: 'rgba(54, 162, 235, 1)',
          borderWidth: 1,
        },
        {
          label: 'Wishlist Creations',
          data: [Math.floor(wishlists.length * 0.1), Math.floor(wishlists.length * 0.3), 
                 Math.floor(wishlists.length * 0.5), wishlists.length - Math.floor(wishlists.length * 0.9)],
          backgroundColor: 'rgba(255, 159, 64, 0.6)',
          borderColor: 'rgba(255, 159, 64, 1)',
          borderWidth: 1,
        }
      ],
    };
  };

  const filterItems = (items, term) => {
    if (!term) return items;
    return items.filter(item => 
      Object.values(item).some(value => 
        value && typeof value === 'string' && 
        value.toLowerCase().includes(term.toLowerCase())
      )
    );
  };

  const sortItems = (items, config) => {
    if (!config.key) return items;
    return [...items].sort((a, b) => {
      const aValue = a[config.key] || '';
      const bValue = b[config.key] || '';
      
      if (aValue < bValue) {
        return config.direction === 'asc' ? -1 : 1;
      }
      if (aValue > bValue) {
        return config.direction === 'asc' ? 1 : -1;
      }
      return 0;
    });
  };

  const requestSort = (key) => {
    let direction = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
  };

  const filteredUsers = filterItems(users, searchTerm);
  const filteredProducts = filterItems(products, searchTerm);
  const sortedUsers = sortItems(filteredUsers, sortConfig);
  const sortedProducts = sortItems(filteredProducts, sortConfig);

  if (loading) return (
    <Container fluid className="vh-100 d-flex flex-column justify-content-center align-items-center bg-light">
      <h2 className="text-primary mb-4">Loading Dashboard Data</h2>
      <div className="w-50 mb-4">
        <ProgressBar 
          animated 
          now={loadingProgress} 
          label={`${Math.round(loadingProgress)}%`} 
          variant="primary" 
        />
      </div>
      <div className="text-center">
        <Spinner animation="border" variant="primary" className="me-2" />
        <p className="text-muted">Fetching the latest data, please wait...</p>
      </div>
    </Container>
  );
  
  if (fetchError) return (
    <Container className="my-5">
      <Alert variant="danger">
        <Alert.Heading>Error Loading Data</Alert.Heading>
        <p>{fetchError}</p>
        <hr />
        <div className="d-flex justify-content-end">
          <Button variant="outline-danger" onClick={() => window.location.reload()}>
            Try Again
          </Button>
        </div>
      </Alert>
    </Container>
  );

  const metrics = calculateKeyMetrics();

  return (
    <Container fluid className="py-4 bg-light">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h1 className="text-primary">
          <i className="bi bi-bar-chart-fill me-2"></i>
          Dashboard Analytics
        </h1>
        <div>
          <Form className="d-flex">
            <InputGroup>
              <InputGroup.Text><i className="bi bi-search"></i></InputGroup.Text>
              <Form.Control
                type="text"
                placeholder="Search..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
              {searchTerm && (
                <Button variant="outline-secondary" onClick={() => setSearchTerm('')}>
                  <i className="bi bi-x"></i>
                </Button>
              )}
            </InputGroup>
            <Button variant="outline-primary" className="ms-2">
              <i className="bi bi-sliders"></i>
            </Button>
          </Form>
        </div>
      </div>

      <Tabs
        activeKey={activeTab}
        onSelect={(k) => setActiveTab(k)}
        className="mb-4"
        fill
      >
        <Tab eventKey="dashboard" title={<span><i className="bi bi-speedometer2 me-2"></i>Dashboard</span>}>
          <Row className="mb-4">
            <Col md={3} sm={6} className="mb-3">
              <Card className="h-100 border-0 shadow-sm">
                <Card.Body className="d-flex align-items-center">
                  <div className="rounded-circle bg-primary bg-opacity-10 p-3 me-3">
                    <i className="bi bi-people-fill text-primary fs-3"></i>
                  </div>
                  <div>
                    <h6 className="text-muted mb-1">Total Users</h6>
                    <h3 className="mb-0">{metrics.totalUsers}</h3>
                  </div>
                </Card.Body>
              </Card>
            </Col>
            <Col md={3} sm={6} className="mb-3">
              <Card className="h-100 border-0 shadow-sm">
                <Card.Body className="d-flex align-items-center">
                  <div className="rounded-circle bg-success bg-opacity-10 p-3 me-3">
                    <i className="bi bi-box-seam text-success fs-3"></i>
                  </div>
                  <div>
                    <h6 className="text-muted mb-1">Total Products</h6>
                    <h3 className="mb-0">{metrics.totalProducts}</h3>
                  </div>
                </Card.Body>
              </Card>
            </Col>
            <Col md={3} sm={6} className="mb-3">
              <Card className="h-100 border-0 shadow-sm">
                <Card.Body className="d-flex align-items-center">
                  <div className="rounded-circle bg-warning bg-opacity-10 p-3 me-3">
                    <i className="bi bi-star-fill text-warning fs-3"></i>
                  </div>
                  <div>
                    <h6 className="text-muted mb-1">Avg. Rating</h6>
                    <h3 className="mb-0">{metrics.averageRating} <small className="text-muted fs-6">/ 5</small></h3>
                  </div>
                </Card.Body>
              </Card>
            </Col>
            <Col md={3} sm={6} className="mb-3">
              <Card className="h-100 border-0 shadow-sm">
                <Card.Body className="d-flex align-items-center">
                  <div className="rounded-circle bg-info bg-opacity-10 p-3 me-3">
                    <i className="bi bi-heart-fill text-info fs-3"></i>
                  </div>
                  <div>
                    <h6 className="text-muted mb-1">Total Wishlists</h6>
                    <h3 className="mb-0">{metrics.totalWishlists}</h3>
                  </div>
                </Card.Body>
              </Card>
            </Col>
          </Row>

          <Row className="mb-5">
            <Col md={4} className="mb-3">
              <Card className="h-100 border-0 shadow-sm">
                <Card.Body>
                  <h6 className="text-muted mb-3">Top Category</h6>
                  <div className="d-flex align-items-center">
                    <h4 className="mb-0">{metrics.topCategory.name}</h4>
                    <Badge bg="primary" className="ms-2">{metrics.topCategory.count} products</Badge>
                  </div>
                  <div className="mt-3">
                    <p className="text-muted mb-1">Category Distribution</p>
                    <ProgressBar>
                      <ProgressBar 
                        variant="success" 
                        now={metrics.topCategory.count} 
                        max={metrics.totalProducts} 
                        key={1} 
                      />
                      <ProgressBar 
                        variant="info" 
                        now={metrics.totalProducts - metrics.topCategory.count} 
                        max={metrics.totalProducts} 
                        key={2} 
                      />
                    </ProgressBar>
                  </div>
                </Card.Body>
              </Card>
            </Col>
            <Col md={4} className="mb-3">
              <Card className="h-100 border-0 shadow-sm">
                <Card.Body>
                  <h6 className="text-muted mb-3">Total Product Value</h6>
                  <h4 className="mb-3">₹{metrics.totalProductValue.toLocaleString()}</h4>
                  <div className="d-flex align-items-center">
                    <div>
                      <p className="text-muted mb-0">Average Product Price</p>
                      <h5 className="text-success">₹{(metrics.totalProductValue / (metrics.totalProducts || 1)).toFixed(2)}</h5>
                    </div>
                  </div>
                </Card.Body>
              </Card>
            </Col>
            <Col md={4} className="mb-3">
              <Card className="h-100 border-0 shadow-sm">
                <Card.Body>
                  <h6 className="text-muted mb-3">Most Wishlisted</h6>
                  <h4 className="mb-0">{metrics.mostWishlistedProduct.name}</h4>
                  <div className="mt-3">
                    <p className="text-muted mb-1">People who added to wishlist</p>
                    <div className="d-flex align-items-center">
                      <div className="me-2">
                        {Array.from({ length: Math.min(5, metrics.mostWishlistedProduct.count) }).map((_, i) => (
                          <i key={i} className="bi bi-person-circle text-primary me-1"></i>
                        ))}
                      </div>
                      <Badge bg="primary">+{Math.max(0, metrics.mostWishlistedProduct.count - 5)} more</Badge>
                    </div>
                  </div>
                </Card.Body>
              </Card>
            </Col>
          </Row>

          <Row className="mb-5">
            <Col lg={6} md={12} className="mb-4">
              <Card className="h-100 shadow">
                <Card.Header className="bg-primary text-white d-flex justify-content-between align-items-center">
                  <h4 className="mb-0">Products by Category</h4>
                  <Button 
                    variant="light" 
                    size="sm"
                    onClick={() => downloadChartAsImage('categoryChart', 'products-by-category')}
                  >
                    <i className="bi bi-download me-1"></i> Export
                  </Button>
                </Card.Header>
                <Card.Body>
                  <Doughnut 
                    data={prepareProductCategoryData()} 
                    options={{ 
                      responsive: true,
                      plugins: {
                        legend: {
                          position: 'right',
                        },
                        tooltip: {
                          callbacks: {
                            label: function(context) {
                              const label = context.label || '';
                              const value = context.raw || 0;
                              const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                              const percentage = Math.round((value / total) * 100);
                              return `${label}: ${value} (${percentage}%)`;
                            }
                          }
                        }
                      }
                    }} 
                    ref={el => chartRefs.current['categoryChart'] = el}
                  />
                </Card.Body>
              </Card>
            </Col>
            <Col lg={6} md={12} className="mb-4">
              <Card className="h-100 shadow">
                <Card.Header className="bg-primary text-white d-flex justify-content-between align-items-center">
                  <h4 className="mb-0">Price Distribution</h4>
                  <Button 
                    variant="light" 
                    size="sm"
                    onClick={() => downloadChartAsImage('priceChart', 'price-distribution')}
                  >
                    <i className="bi bi-download me-1"></i> Export
                  </Button>
                </Card.Header>
                <Card.Body>
                  <Bar 
                    data={priceRangeData()} 
                    options={{ 
                      responsive: true,
                      plugins: {
                        tooltip: {
                          callbacks: {
                            label: function(context) {
                              return `${context.dataset.label}: ${context.raw} products`;
                            }
                          }
                        }
                      }
                    }} 
                    ref={el => chartRefs.current['priceChart'] = el}
                  />
                </Card.Body>
              </Card>
            </Col>
            <Col lg={6} md={12} className="mb-4">
              <Card className="h-100 shadow">
                <Card.Header className="bg-primary text-white d-flex justify-content-between align-items-center">
                  <h4 className="mb-0">Rating Distribution</h4>
                  <Button 
                    variant="light" 
                    size="sm"
                    onClick={() => downloadChartAsImage('ratingChart', 'rating-distribution')}
                  >
                    <i className="bi bi-download me-1"></i> Export
                  </Button>
                </Card.Header>
                <Card.Body>
                  <Bar 
                    data={prepareReviewsRatingData()} 
                    options={{ 
                      responsive: true,
                      scales: {
                        y: {
                          beginAtZero: true,
                          title: {
                            display: true,
                            text: 'Number of Reviews'
                          }
                        }
                      }
                    }} 
                    ref={el => chartRefs.current['ratingChart'] = el}
                  />
                </Card.Body>
              </Card>
            </Col>
            <Col lg={6} md={12} className="mb-4">
              <Card className="h-100 shadow">
                <Card.Header className="bg-primary text-white d-flex justify-content-between align-items-center">
                  <h4 className="mb-0">User Engagement Trends</h4>
                  <Button 
                    variant="light" 
                    size="sm"
                    onClick={() => downloadChartAsImage('userEngagementChart', 'user-engagement')}
                  >
                    <i className="bi bi-download me-1"></i> Export
                  </Button>
                </Card.Header>
                <Card.Body>
                  <Line 
                    data={prepareUserEngagementData()} 
                    options={{ 
                      responsive: true,
                      scales: {
                        y: {
                          beginAtZero: true
                        }
                      }
                    }} 
                    ref={el => chartRefs.current['userEngagementChart'] = el}
                  />
                </Card.Body>
              </Card>
            </Col>
          </Row>
        </Tab>

        <Tab eventKey="tables" title={<span><i className="bi bi-table me-2"></i>Data Tables</span>}>
          <Card className="shadow mb-5">
            <Card.Header className="bg-primary text-white d-flex justify-content-between align-items-center">
              <h3 className="mb-0">User Details</h3>
              <Button 
                variant="light" 
                size="sm"
                onClick={() => exportTableToCSV('usersTable', 'users-data')}
              >
                <i className="bi bi-download me-1"></i> Export CSV
              </Button>
            </Card.Header>
            <Card.Body className="p-0">
              <div className="table-responsive">
                <table className="table table-striped table-hover mb-0" id="usersTable">
                  <thead className="table-primary">
                    <tr>
                      <th onClick={() => requestSort('name')} style={{cursor: 'pointer'}}>
                        Name {sortConfig.key === 'name' && (
                          <i className={`bi bi-caret-${sortConfig.direction === 'asc' ? 'up' : 'down'}-fill ms-1`}></i>
                        )}
                      </th>
                      <th onClick={() => requestSort('email')} style={{cursor: 'pointer'}}>
                        Email {sortConfig.key === 'email' && (
                          <i className={`bi bi-caret-${sortConfig.direction === 'asc' ? 'up' : 'down'}-fill ms-1`}></i>
                        )}
                      </th>
                      <th>Phone</th>
                      <th>Address</th>
                      <th>Bio</th>
                      <th>Wishlist Count</th>
                      <th>Updated At</th>
                    </tr>
                  </thead>
                  <tbody>
                    {sortedUsers.length === 0 ? (
                      <tr>
                        <td colSpan={7} className="text-center">No users found matching "{searchTerm}"</td>
                      </tr>
                    ) : (
                      sortedUsers.map((u) => (
                        <tr key={u._id}>
                          <td>
                            <div className="d-flex align-items-center">
                              <div className="avatar bg-primary text-white rounded-circle me-2 d-flex align-items-center justify-content-center" style={{width: '30px', height: '30px'}}>
                                {u.name.charAt(0).toUpperCase()}
                              </div>
                              {u.name}
                            </div>
                          </td>
                          <td>{u.email}</td>
                          <td>{u.phone || "-"}</td>
                          <td>{u.address || "-"}</td>
                          <td>{u.bio || "-"}</td>
                          <td>
                            <Badge bg={u.wishlist && u.wishlist.length > 0 ? "success" : "secondary"}>
                              {u.wishlist ? u.wishlist.length : 0}
                            </Badge>
                          </td>
                          <td>{u.updatedAt ? new Date(u.updatedAt).toLocaleString() : "-"}</td>
                        </tr>
                      ))
                    )}
                  </tbody>
                </table>
              </div>
            </Card.Body>
          </Card>

          <Card className="shadow mb-5">
            <Card.Header className="bg-primary text-white d-flex justify-content-between align-items-center">
              <h3 className="mb-0">Product Details</h3>
              <Button 
                variant="light" 
                size="sm"
                onClick={() => exportTableToCSV('productsTable', 'products-data')}
              >
                <i className="bi bi-download me-1"></i> Export CSV
              </Button>
            </Card.Header>
            <Card.Body className="p-0">
              <div className="table-responsive">
                <table className="table table-striped table-hover mb-0" id="productsTable">
                  <thead className="table-primary">
                    <tr>
                      <th onClick={() => requestSort('name')} style={{cursor: 'pointer'}}>
                        Name {sortConfig.key === 'name' && (
                          <i className={`bi bi-caret-${sortConfig.direction === 'asc' ? 'up' : 'down'}-fill ms-1`}></i>
                        )}
                      </th>
                      <th onClick={() => requestSort('price')} style={{cursor: 'pointer'}}>
                        Price {sortConfig.key === 'price' && (
                          <i className={`bi bi-caret-${sortConfig.direction === 'asc' ? 'up' : 'down'}-fill ms-1`}></i>
                        )}
                      </th>
                      <th>Image</th>
                      <th onClick={() => requestSort('category')} style={{cursor: 'pointer'}}>
                        Category {sortConfig.key === 'category' && (
                          <i className={`bi bi-caret-${sortConfig.direction === 'asc' ? 'up' : 'down'}-fill ms-1`}></i>
                        )}
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {sortedProducts.length === 0 ? (
                      <tr>
                        <td colSpan={4} className="text-center">No products found matching "{searchTerm}"</td>
                      </tr>
                    ) : (
                      sortedProducts.map((p) => (
                        <tr key={p._id}>
                          <td>{p.name}</td>
                          <td>
                            <Badge bg="success">₹{p.price}</Badge>
                          </td>
                          <td>
                            {p.image ? (
                              <img
                                src={p.image}
                                alt={p.name}
                                className="img-thumbnail"
                                style={{
                                  width: 50,
                                  height: 50,
                                  objectFit: "cover",
                                }}
                              />
                            ) : (
                              <div className="bg-light text-center" style={{width: 50, height: 50, lineHeight: '50px'}}>
                                <i className="bi bi-image text-muted"></i>
                              </div>
                            )}
                          </td>
                          <td>
                            <span className="badge bg-info">{p.category || "Uncategorized"}</span>
                          </td>
                        </tr>
                      ))
                    )}
                  </tbody>
                </table>
              </div>
            </Card.Body>
          </Card>
        </Tab>
      </Tabs>
    </Container>
  );
}
export default Table;